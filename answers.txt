########################
# CS3217 Problem Set 5 #
########################

# Name: Yap Jun Hao
# Matric No: A0113694A
# Tutor: Cui Wei

######################
# Rules of Your Game #
######################

Rules for standard bubble interaction

- Destruction of similarly coloured bubbles that are connected adjacently in groups of 3 or more. Hanging bubbles are also removed at the end of each turn.

Rules for special bubble interaction

- Indestructible bubbles have to be removed by falling out of the screen OR be bombed OR be electrocuted by the lightning bubble
- Lightning bubbles removes all bubbles in the same row and if any other lightning or bomb bubbles are removed that way, they are triggered as well.
- Bomb bubbles removes all bubbles adjacent to the cell it is at and if any other lightning or bomb bubbles are removed that way, they are triggered as well.
- Star bubbles removed all bubbles of the same color of the bubble that triggered it (or most recently snapped bubble that triggered it)

Rules for winning game

- No more bubbles in the game arena

Rules for losing game

- Bubbles are beyond what the grid can contain (a.k.a 9 rows or 12 / 11)
- No more bubbles to be shot by the cannon


###############################
# Problem 1: Cannon Direction #
###############################

The user is supposed to select the cannon direction by simply tapping the screen.


###############################
# Problem 2: Upcoming Bubbles #
###############################

Number of next bubble(s) to show: 1

Algorithm:

In essence, randomise between the number of basic bubbles still in the game arena and they can and may be changed depending on if the next bubble shown is no longer in the game arena after the current bubble is shot.

Basic Bubbles include:

Red
Orange
Green
Blue


##########################
# Problem 3: Integration #
##########################

My design allowed the integration of the game engine because the main way of parsing a game level designed or packaged is through the same class “Basic Level” and having a game engine that knows how to unpack these “levels” or other possible levels (if ever in the future).

In that sense, we can simply segue into the game view controller and have the game engine there simply unpack the level that is “passed” over during the segue.

Advantages:

1. No monolithic view controller that contains logic that might not be applicable to it’s different uses

2. Able to more easily visualise on the storyboard how the different scenes of the game connect, i.e. easier to see how the game flows on the storyboard

3. Can build up the levels using code (as shown by the packaged level one to five)

4. Since levels are in code, there is no need to worry about app structure changes introduced by what we’re based on (note: file structure change in apps from Apple)

Disadvantages:

1. Have to load another view controller entirely and can’t share certain portions of code that might be used on both the designer controller and the game controller

2. Each kind of “levels” that we want to implement, we will need to teach the game engine how to unpack and each different kind of configuration or arrangement there’ll need to be logic dealing with that

Alternative approach / approaches:

a) Have one view controller that can deal with both designing and the game engine portion and simply change the grid containing the bubbles with the designer grid to be the actual screen play area, enabling and disabling the appropriate gesture recognisers.

Advantages:

1. Instantaneously able to share code with the game portion especially for code that makes sense for both like updating grids etc.

2. More flexible and easier to implement different kind of “levels” since there is no need to unpack the levels as it is already there.

Disadvantages:

1. Have one monolithic view controller that might have a large amount of logic, difficult to read through in one shot and may scare newer developers or partners from being able to parse the code effectively

2. Might not be apparent to a non-technical person how the game scenes actually link with each other etc.

b) Have two different view controllers to manage level designing and gameplay separately but make them load from and save to plists that represents the levels separately. Very similar to our strategy employed except for the plist part. Advantages and disadvantages are very similar except:

Main difference:

If app structure somehow changes, there will need to be changes in the app or else it won’t be backwards compatible.


###############
# Problem 4.3 #
###############

My general strategy for implementing these special behaviours is to detect when a special bubble has been “collided with” and append to a Queue the special bubbles that needs to be dealt with. In that sense, if more special bubbles are met along the way of clearing up each special bubble, we simply continue appending to the Queue and sequentially deal with each special bubble as per needed.

This strategy is best in my opinion because there is a possibility of infinitely many special bubbles to be dealt with when one is being dealt with and if we have already “cleared them through explosions or the sort” before appending them to some sort of data structure, we will lose track of them. Plus, it wouldn’t make sense physically if all the bubbles just get cleared all at the exact same time!


############################
# Problem 6: Class Diagram #
############################

Please save your diagram as `class-diagram.png` in the root directory of the repository.


######################
# Problem 7: Testing #
######################

Black Box Testing

Level Designer Tests:



Game Engine Tests:



Game Flow Tests:



Glass Box Testing

Level Designer Tests:



Game Engine Tests:



Game Flow Tests:


###################################
# Problem 8: The Bells & Whistles #
###################################

List of improvements / functionalities added:

To be added upon adding them

1. Fruit theme integration (done)
changes to design:
Not much, just rehabbed the whole game to look like a fruit farm / have a lot of fruity fruity stuff!

2. Game Score (done)
changes to design:
Added tracking of game score and score addition mechanism

3. Rules for losing / winning game! (done)
changes to design:
Added functions inside the game engine to check whether any of the win / lose conditions are met and if they are met, the controller can take over the handling. In that sense, we also added tracking of certain information such as whether the arena is empty, whether there are still bubbles to be shot etc.

4. Limited Number of Bubbles (done)
changes to design:
Added tracking of number of bubbles to be shot

5. More than 3 levels [5 + 1 really cool level] (done)
changes to design:
None, just build the extra and more creative levels in Swift code inside BasicLevel class

6. Tweet score achieved on level x (done)
changes to design:
None, just import Social framework from Apple

7. Facebook score achieved on level x(done)
changes to design:
None, just import Social framework from Apple

8. Background music for the game (done)
changes to design:
Added a singleton soundManager class that plays the sound once the first screen has been initiated

9. Switch between current and next bubble (done)
changes to design:
Keep track of both bubbles and switch them accordingly when the swap button is pressed

10. Fluffy rolling sheep when game is in action (done)
changes to design:
None, just fluff animation, just add a sheep jumping around lol

11. Explosion animation (done)
changes to design:
None, just add the image and animate it using UIImage animations

12. Lightning animation (done)
changes to design:
None, just add the image and animate it using UIImage animations

13. Star animation (done)
changes to design:
None, just add the image and animate it using UIImage animations

14. App Logo (done)
changes to design:
None, just add the appropriate image into the AppIcon .xcassets

15. Credits Screen (done)
changes to design:
Just added a credits screen with a default UIView in the storyboard

16. Special thing will happen if you shoot a bubble and hit the sheep (done)
changes to design:
Just made the sound class play CNY song instead of the background music

###############################
# Problem 9: Final Reflection #
###############################

Comments on design of MVC architecture:

- Not too good, existing unnecessary access from one view controller to another which leads to complication
- Not too good, too many instantiating of the same views over and over again by the same view controller
- Decent, views do not know about the model or the view controllers
- Decent, model logic is separated from view controller’s logic

Comments on design of game engine:

- Not too good, game engine has direct access to the view controller itself and is not prevented from actually doing things to the view controller if it wanted to
- Decent, separated from the view controller and can be unit-tested
- Decent, game’s logic is separated from logic to “redraw” the view

How to improve MVC architecture design:

- Use delegates and NSNotifications to “call” one another instead of directly accessing each other which degrades maintainability by a lot
- Create utility classes for the bubbles images and just reference them instead of instantiating a new one every time

How to improve game engine design:

- Instead of giving the game engine direct access to the view controller, we could (knowing the geometry of the game arena and the view), calculate what we need and / or find other ways of finding what we need instead of passing the view controller to the game engine entirely! Not very good abstraction to have view controller which contains a game engine that has access to itself!

